/*
  # Criar tabelas da lista de compras

  1. Novas Tabelas
    - `lists` - Listas de compras
      - `id` (uuid, primary key)
      - `name` (text) - Nome da lista
      - `created_at` (timestamptz) - Data de cria√ß√£o
      - `user_id` (uuid) - ID do usu√°rio
      
    - `items` - Itens das listas
      - `id` (uuid, primary key)
      - `name` (text) - Nome do item
      - `quantity` (integer) - Quantidade
      - `price` (numeric) - Pre√ßo
      - `completed` (boolean) - Item marcado como completo
      - `group` (text) - Categoria/grupo do item
      - `list_id` (uuid) - Refer√™ncia √† lista
      - `created_at` (timestamptz) - Data de cria√ß√£o
      
    - `categories` - Categorias de produtos
      - `id` (uuid, primary key)
      - `name` (text) - Nome da categoria
      - `user_id` (uuid) - ID do usu√°rio
      - `created_at` (timestamptz) - Data de cria√ß√£o
      
    - `suggestions` - Sugest√µes de itens
      - `id` (uuid, primary key)
      - `name` (text) - Nome do item sugerido
      - `user_id` (uuid) - ID do usu√°rio
      - `created_at` (timestamptz) - Data de cria√ß√£o

  2. Seguran√ßa
    - Habilitar RLS em todas as tabelas
    - Pol√≠ticas para que cada usu√°rio veja apenas seus dados
    - Fun√ß√£o trigger para criar categorias e sugest√µes padr√£o para novos usu√°rios
*/

-- Criar tabela de listas
CREATE TABLE IF NOT EXISTS lists (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  created_at timestamptz DEFAULT now(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Criar tabela de itens
CREATE TABLE IF NOT EXISTS items (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  quantity integer DEFAULT 1,
  price numeric(10,2) DEFAULT 0,
  completed boolean DEFAULT false,
  "group" text DEFAULT 'üì¶ Outros',
  list_id uuid REFERENCES lists(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now()
);

-- Criar tabela de categorias
CREATE TABLE IF NOT EXISTS categories (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  UNIQUE(name, user_id)
);

-- Criar tabela de sugest√µes
CREATE TABLE IF NOT EXISTS suggestions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  UNIQUE(name, user_id)
);

-- Criar √≠ndices para melhor performance
CREATE INDEX IF NOT EXISTS items_list_id_idx ON items(list_id);
CREATE INDEX IF NOT EXISTS items_group_idx ON items("group");
CREATE INDEX IF NOT EXISTS lists_created_at_idx ON lists(created_at DESC);
CREATE INDEX IF NOT EXISTS lists_user_id_idx ON lists(user_id);
CREATE INDEX IF NOT EXISTS categories_user_id_idx ON categories(user_id);
CREATE INDEX IF NOT EXISTS suggestions_user_id_idx ON suggestions(user_id);

-- Habilitar RLS em todas as tabelas
ALTER TABLE lists ENABLE ROW LEVEL SECURITY;
ALTER TABLE items ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE suggestions ENABLE ROW LEVEL SECURITY;

-- Pol√≠ticas para a tabela lists
CREATE POLICY "Users can view own lists"
  ON lists FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own lists"
  ON lists FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own lists"
  ON lists FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own lists"
  ON lists FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Pol√≠ticas para a tabela items
CREATE POLICY "Users can view own items"
  ON items FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM lists
      WHERE lists.id = items.list_id
      AND lists.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create own items"
  ON items FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM lists
      WHERE lists.id = items.list_id
      AND lists.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update own items"
  ON items FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM lists
      WHERE lists.id = items.list_id
      AND lists.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM lists
      WHERE lists.id = items.list_id
      AND lists.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete own items"
  ON items FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM lists
      WHERE lists.id = items.list_id
      AND lists.user_id = auth.uid()
    )
  );

-- Pol√≠ticas para a tabela categories
CREATE POLICY "Users can view own categories"
  ON categories FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own categories"
  ON categories FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own categories"
  ON categories FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own categories"
  ON categories FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Pol√≠ticas para a tabela suggestions
CREATE POLICY "Users can view own suggestions"
  ON suggestions FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own suggestions"
  ON suggestions FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own suggestions"
  ON suggestions FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own suggestions"
  ON suggestions FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Fun√ß√£o para criar categorias e sugest√µes padr√£o para novos usu√°rios
CREATE OR REPLACE FUNCTION create_default_data_for_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO categories (name, user_id) VALUES
    ('ü•¨ Hortifruti', NEW.id),
    ('ü•© Carnes', NEW.id),
    ('ü•õ Latic√≠nios', NEW.id),
    ('ü•ñ Padaria', NEW.id),
    ('ü•´ Mercearia', NEW.id),
    ('üßÉ Bebidas', NEW.id),
    ('üßπ Limpeza', NEW.id),
    ('üß¥ Higiene', NEW.id),
    ('üßä Congelados', NEW.id),
    ('ü•ú Cereais', NEW.id),
    ('üçù Massas', NEW.id),
    ('ü•´ Enlatados', NEW.id),
    ('üßÇ Temperos', NEW.id),
    ('üç¨ Doces', NEW.id),
    ('üê∂ Pet Shop', NEW.id),
    ('üì¶ Outros', NEW.id)
  ON CONFLICT (name, user_id) DO NOTHING;

  INSERT INTO suggestions (name, user_id) VALUES
    ('ü•¨ Alface', NEW.id),
    ('ü•ï Cenoura', NEW.id),
    ('üçÖ Tomate', NEW.id),
    ('ü•î Batata', NEW.id),
    ('üßÖ Cebola', NEW.id),
    ('ü•© Carne Mo√≠da', NEW.id),
    ('üçó Frango', NEW.id),
    ('ü•õ Leite', NEW.id),
    ('üßÄ Queijo', NEW.id),
    ('ü•ñ P√£o', NEW.id),
    ('ü•ö Ovos', NEW.id),
    ('üßª Papel Higi√™nico', NEW.id),
    ('üß¥ Sabonete', NEW.id),
    ('üßº Detergente', NEW.id),
    ('üßπ Vassoura', NEW.id),
    ('üßÇ Sal', NEW.id),
    ('üçö Arroz', NEW.id),
    ('ü´ò Feij√£o', NEW.id),
    ('üçù Macarr√£o', NEW.id),
    ('‚òï Caf√©', NEW.id),
    ('üßÉ Suco', NEW.id),
    ('ü•§ Refrigerante', NEW.id),
    ('üç™ Biscoito', NEW.id),
    ('üß¥ Shampoo', NEW.id)
  ON CONFLICT (name, user_id) DO NOTHING;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para criar dados padr√£o quando um novo usu√°rio se registra
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION create_default_data_for_user();
